/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: contract.proto */

#ifndef PROTOBUF_C_contract_2eproto__INCLUDED
#define PROTOBUF_C_contract_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct Xchain__PingRequest Xchain__PingRequest;
typedef struct Xchain__PingResponse Xchain__PingResponse;
typedef struct Xchain__NativeCallRequest Xchain__NativeCallRequest;
typedef struct Xchain__NativeCallResponse Xchain__NativeCallResponse;
typedef struct Xchain__ArgPair Xchain__ArgPair;
typedef struct Xchain__CallArgs Xchain__CallArgs;
typedef struct Xchain__SyscallHeader Xchain__SyscallHeader;
typedef struct Xchain__PutRequest Xchain__PutRequest;
typedef struct Xchain__PutResponse Xchain__PutResponse;
typedef struct Xchain__GetRequest Xchain__GetRequest;
typedef struct Xchain__GetResponse Xchain__GetResponse;
typedef struct Xchain__DeleteRequest Xchain__DeleteRequest;
typedef struct Xchain__DeleteResponse Xchain__DeleteResponse;
typedef struct Xchain__IteratorRequest Xchain__IteratorRequest;
typedef struct Xchain__IteratorItem Xchain__IteratorItem;
typedef struct Xchain__IteratorResponse Xchain__IteratorResponse;
typedef struct Xchain__QueryTxRequest Xchain__QueryTxRequest;
typedef struct Xchain__QueryTxResponse Xchain__QueryTxResponse;
typedef struct Xchain__QueryBlockRequest Xchain__QueryBlockRequest;
typedef struct Xchain__QueryBlockResponse Xchain__QueryBlockResponse;
typedef struct Xchain__TransferRequest Xchain__TransferRequest;
typedef struct Xchain__TransferResponse Xchain__TransferResponse;
typedef struct Xchain__ContractCallRequest Xchain__ContractCallRequest;
typedef struct Xchain__ContractCallResponse Xchain__ContractCallResponse;
typedef struct Xchain__CrossContractQueryRequest Xchain__CrossContractQueryRequest;
typedef struct Xchain__CrossContractQueryResponse Xchain__CrossContractQueryResponse;
typedef struct Xchain__Response Xchain__Response;
typedef struct Xchain__SetOutputRequest Xchain__SetOutputRequest;
typedef struct Xchain__SetOutputResponse Xchain__SetOutputResponse;
typedef struct Xchain__GetCallArgsRequest Xchain__GetCallArgsRequest;
typedef struct Xchain__TxInput Xchain__TxInput;
typedef struct Xchain__TxOutput Xchain__TxOutput;
typedef struct Xchain__Transaction Xchain__Transaction;
typedef struct Xchain__Block Xchain__Block;
typedef struct Xchain__GetAccountAddressesRequest Xchain__GetAccountAddressesRequest;
typedef struct Xchain__GetAccountAddressesResponse Xchain__GetAccountAddressesResponse;
typedef struct Xchain__PostLogRequest Xchain__PostLogRequest;
typedef struct Xchain__PostLogResponse Xchain__PostLogResponse;
typedef struct Xchain__EmitEventRequest Xchain__EmitEventRequest;
typedef struct Xchain__EmitEventResponse Xchain__EmitEventResponse;


/* --- enums --- */


/* --- messages --- */

struct  Xchain__PingRequest
{
  ProtobufCMessage base;
};
#define XCHAIN__PING_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&xchain__ping_request__descriptor) \
     }


struct  Xchain__PingResponse
{
  ProtobufCMessage base;
};
#define XCHAIN__PING_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&xchain__ping_response__descriptor) \
     }


struct  Xchain__NativeCallRequest
{
  ProtobufCMessage base;
  /*
   * The context id of this request
   */
  int64_t ctxid;
};
#define XCHAIN__NATIVE_CALL_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&xchain__native_call_request__descriptor) \
    , 0 }


struct  Xchain__NativeCallResponse
{
  ProtobufCMessage base;
};
#define XCHAIN__NATIVE_CALL_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&xchain__native_call_response__descriptor) \
     }


struct  Xchain__ArgPair
{
  ProtobufCMessage base;
  char *key;
  ProtobufCBinaryData value;
};
#define XCHAIN__ARG_PAIR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&xchain__arg_pair__descriptor) \
    , (char *)protobuf_c_empty_string, {0,NULL} }


struct  Xchain__CallArgs
{
  ProtobufCMessage base;
  char *method;
  size_t n_args;
  Xchain__ArgPair **args;
  char *initiator;
  size_t n_auth_require;
  char **auth_require;
  char *transfer_amount;
};
#define XCHAIN__CALL_ARGS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&xchain__call_args__descriptor) \
    , (char *)protobuf_c_empty_string, 0,NULL, (char *)protobuf_c_empty_string, 0,NULL, (char *)protobuf_c_empty_string }


struct  Xchain__SyscallHeader
{
  ProtobufCMessage base;
  int64_t ctxid;
};
#define XCHAIN__SYSCALL_HEADER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&xchain__syscall_header__descriptor) \
    , 0 }


struct  Xchain__PutRequest
{
  ProtobufCMessage base;
  Xchain__SyscallHeader *header;
  ProtobufCBinaryData key;
  ProtobufCBinaryData value;
};
#define XCHAIN__PUT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&xchain__put_request__descriptor) \
    , NULL, {0,NULL}, {0,NULL} }


struct  Xchain__PutResponse
{
  ProtobufCMessage base;
};
#define XCHAIN__PUT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&xchain__put_response__descriptor) \
     }


struct  Xchain__GetRequest
{
  ProtobufCMessage base;
  Xchain__SyscallHeader *header;
  ProtobufCBinaryData key;
};
#define XCHAIN__GET_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&xchain__get_request__descriptor) \
    , NULL, {0,NULL} }


struct  Xchain__GetResponse
{
  ProtobufCMessage base;
  ProtobufCBinaryData value;
};
#define XCHAIN__GET_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&xchain__get_response__descriptor) \
    , {0,NULL} }


struct  Xchain__DeleteRequest
{
  ProtobufCMessage base;
  Xchain__SyscallHeader *header;
  ProtobufCBinaryData key;
};
#define XCHAIN__DELETE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&xchain__delete_request__descriptor) \
    , NULL, {0,NULL} }


struct  Xchain__DeleteResponse
{
  ProtobufCMessage base;
};
#define XCHAIN__DELETE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&xchain__delete_response__descriptor) \
     }


struct  Xchain__IteratorRequest
{
  ProtobufCMessage base;
  Xchain__SyscallHeader *header;
  /*
   * start和limit为[start, limit)
   */
  ProtobufCBinaryData start;
  ProtobufCBinaryData limit;
  /*
   * cap代表一次请求的最大IteratorItem个数，如果为0则采用xchain的默认配置
   */
  int32_t cap;
};
#define XCHAIN__ITERATOR_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&xchain__iterator_request__descriptor) \
    , NULL, {0,NULL}, {0,NULL}, 0 }


struct  Xchain__IteratorItem
{
  ProtobufCMessage base;
  ProtobufCBinaryData key;
  ProtobufCBinaryData value;
};
#define XCHAIN__ITERATOR_ITEM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&xchain__iterator_item__descriptor) \
    , {0,NULL}, {0,NULL} }


struct  Xchain__IteratorResponse
{
  ProtobufCMessage base;
  size_t n_items;
  Xchain__IteratorItem **items;
};
#define XCHAIN__ITERATOR_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&xchain__iterator_response__descriptor) \
    , 0,NULL }


struct  Xchain__QueryTxRequest
{
  ProtobufCMessage base;
  Xchain__SyscallHeader *header;
  char *txid;
};
#define XCHAIN__QUERY_TX_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&xchain__query_tx_request__descriptor) \
    , NULL, (char *)protobuf_c_empty_string }


struct  Xchain__QueryTxResponse
{
  ProtobufCMessage base;
  /*
   * defined in user code
   */
  Xchain__Transaction *tx;
};
#define XCHAIN__QUERY_TX_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&xchain__query_tx_response__descriptor) \
    , NULL }


struct  Xchain__QueryBlockRequest
{
  ProtobufCMessage base;
  Xchain__SyscallHeader *header;
  char *blockid;
};
#define XCHAIN__QUERY_BLOCK_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&xchain__query_block_request__descriptor) \
    , NULL, (char *)protobuf_c_empty_string }


struct  Xchain__QueryBlockResponse
{
  ProtobufCMessage base;
  /*
   * defined in user code
   */
  Xchain__Block *block;
};
#define XCHAIN__QUERY_BLOCK_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&xchain__query_block_response__descriptor) \
    , NULL }


struct  Xchain__TransferRequest
{
  ProtobufCMessage base;
  Xchain__SyscallHeader *header;
  char *from;
  char *to;
  char *amount;
};
#define XCHAIN__TRANSFER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&xchain__transfer_request__descriptor) \
    , NULL, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  Xchain__TransferResponse
{
  ProtobufCMessage base;
};
#define XCHAIN__TRANSFER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&xchain__transfer_response__descriptor) \
     }


struct  Xchain__ContractCallRequest
{
  ProtobufCMessage base;
  Xchain__SyscallHeader *header;
  char *module;
  char *contract;
  char *method;
  size_t n_args;
  Xchain__ArgPair **args;
};
#define XCHAIN__CONTRACT_CALL_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&xchain__contract_call_request__descriptor) \
    , NULL, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0,NULL }


struct  Xchain__ContractCallResponse
{
  ProtobufCMessage base;
  Xchain__Response *response;
};
#define XCHAIN__CONTRACT_CALL_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&xchain__contract_call_response__descriptor) \
    , NULL }


struct  Xchain__CrossContractQueryRequest
{
  ProtobufCMessage base;
  Xchain__SyscallHeader *header;
  char *uri;
  size_t n_args;
  Xchain__ArgPair **args;
};
#define XCHAIN__CROSS_CONTRACT_QUERY_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&xchain__cross_contract_query_request__descriptor) \
    , NULL, (char *)protobuf_c_empty_string, 0,NULL }


struct  Xchain__CrossContractQueryResponse
{
  ProtobufCMessage base;
  Xchain__Response *response;
};
#define XCHAIN__CROSS_CONTRACT_QUERY_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&xchain__cross_contract_query_response__descriptor) \
    , NULL }


struct  Xchain__Response
{
  ProtobufCMessage base;
  int32_t status;
  char *message;
  ProtobufCBinaryData body;
};
#define XCHAIN__RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&xchain__response__descriptor) \
    , 0, (char *)protobuf_c_empty_string, {0,NULL} }


struct  Xchain__SetOutputRequest
{
  ProtobufCMessage base;
  Xchain__SyscallHeader *header;
  Xchain__Response *response;
};
#define XCHAIN__SET_OUTPUT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&xchain__set_output_request__descriptor) \
    , NULL, NULL }


struct  Xchain__SetOutputResponse
{
  ProtobufCMessage base;
};
#define XCHAIN__SET_OUTPUT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&xchain__set_output_response__descriptor) \
     }


struct  Xchain__GetCallArgsRequest
{
  ProtobufCMessage base;
  Xchain__SyscallHeader *header;
};
#define XCHAIN__GET_CALL_ARGS_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&xchain__get_call_args_request__descriptor) \
    , NULL }


/*
 * Transaction input
 */
struct  Xchain__TxInput
{
  ProtobufCMessage base;
  /*
   * The transaction id referenced to
   */
  char *ref_txid;
  /*
   * The output offset of the transaction referenced to
   */
  int32_t ref_offset;
  /*
   * The address of the launcher
   */
  ProtobufCBinaryData from_addr;
  /*
   * The amount of the transaction
   */
  char *amount;
  /*
   * Frozen height
   */
  int64_t frozen_height;
};
#define XCHAIN__TX_INPUT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&xchain__tx_input__descriptor) \
    , (char *)protobuf_c_empty_string, 0, {0,NULL}, (char *)protobuf_c_empty_string, 0 }


/*
 * Transaction output
 */
struct  Xchain__TxOutput
{
  ProtobufCMessage base;
  /*
   * The amount of the transaction
   */
  char *amount;
  /*
   * The address of the launcher
   */
  ProtobufCBinaryData to_addr;
  /*
   * Fronzen height
   */
  int64_t frozen_height;
};
#define XCHAIN__TX_OUTPUT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&xchain__tx_output__descriptor) \
    , (char *)protobuf_c_empty_string, {0,NULL}, 0 }


/*
 * Transaction is the information of the transaction
 */
struct  Xchain__Transaction
{
  ProtobufCMessage base;
  /*
   * txid is the id of this transaction
   */
  char *txid;
  /*
   * the blockid the transaction belong to
   */
  char *blockid;
  /*
   * Transaction input list
   */
  size_t n_tx_inputs;
  Xchain__TxInput **tx_inputs;
  /*
   * Transaction output list
   */
  size_t n_tx_outputs;
  Xchain__TxOutput **tx_outputs;
  /*
   * Transaction description or system contract
   */
  ProtobufCBinaryData desc;
  /*
   * 权限系统新增字段
   * 交易发起者, 可以是一个Address或者一个Account
   */
  char *initiator;
  /*
   * 交易发起需要被收集签名的AddressURL集合信息，包括用于utxo转账和用于合约调用
   */
  size_t n_auth_require;
  char **auth_require;
};
#define XCHAIN__TRANSACTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&xchain__transaction__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0,NULL, 0,NULL, {0,NULL}, (char *)protobuf_c_empty_string, 0,NULL }


/*
 * The block struct
 */
struct  Xchain__Block
{
  ProtobufCMessage base;
  /*
   * blockid generate the hash sign of the block used by sha256
   */
  char *blockid;
  /*
   * pre_hash is the parent blockid of the block
   */
  char *pre_hash;
  /*
   * The miner id
   */
  ProtobufCBinaryData proposer;
  /*
   * The sign which miner signed: blockid + nonce + timestamp
   */
  char *sign;
  /*
   * The pk of the miner
   */
  ProtobufCBinaryData pubkey;
  /*
   * The height of the blockchain
   */
  int64_t height;
  /*
   * Timestamp of the block
   */
  int64_t timestamp;
  /*
   * Transactions of the block, only txid stored on kv, the detail information stored in another table
   */
  size_t n_txids;
  char **txids;
  /*
   * The transaction count of the block
   */
  int32_t tx_count;
  /*
   *下面的属性会动态变化
   * If the block is on the trunk
   */
  protobuf_c_boolean in_trunk;
  /*
   * Next next block which on trunk
   */
  char *next_hash;
};
#define XCHAIN__BLOCK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&xchain__block__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, {0,NULL}, (char *)protobuf_c_empty_string, {0,NULL}, 0, 0, 0,NULL, 0, 0, (char *)protobuf_c_empty_string }


struct  Xchain__GetAccountAddressesRequest
{
  ProtobufCMessage base;
  Xchain__SyscallHeader *header;
  char *account;
};
#define XCHAIN__GET_ACCOUNT_ADDRESSES_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&xchain__get_account_addresses_request__descriptor) \
    , NULL, (char *)protobuf_c_empty_string }


struct  Xchain__GetAccountAddressesResponse
{
  ProtobufCMessage base;
  size_t n_addresses;
  char **addresses;
};
#define XCHAIN__GET_ACCOUNT_ADDRESSES_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&xchain__get_account_addresses_response__descriptor) \
    , 0,NULL }


struct  Xchain__PostLogRequest
{
  ProtobufCMessage base;
  Xchain__SyscallHeader *header;
  char *entry;
};
#define XCHAIN__POST_LOG_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&xchain__post_log_request__descriptor) \
    , NULL, (char *)protobuf_c_empty_string }


struct  Xchain__PostLogResponse
{
  ProtobufCMessage base;
  char *entry;
};
#define XCHAIN__POST_LOG_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&xchain__post_log_response__descriptor) \
    , (char *)protobuf_c_empty_string }


struct  Xchain__EmitEventRequest
{
  ProtobufCMessage base;
  Xchain__SyscallHeader *header;
  char *name;
  ProtobufCBinaryData body;
};
#define XCHAIN__EMIT_EVENT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&xchain__emit_event_request__descriptor) \
    , NULL, (char *)protobuf_c_empty_string, {0,NULL} }


struct  Xchain__EmitEventResponse
{
  ProtobufCMessage base;
};
#define XCHAIN__EMIT_EVENT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&xchain__emit_event_response__descriptor) \
     }


/* Xchain__PingRequest methods */
void   xchain__ping_request__init
                     (Xchain__PingRequest         *message);
size_t xchain__ping_request__get_packed_size
                     (const Xchain__PingRequest   *message);
size_t xchain__ping_request__pack
                     (const Xchain__PingRequest   *message,
                      uint8_t             *out);
size_t xchain__ping_request__pack_to_buffer
                     (const Xchain__PingRequest   *message,
                      ProtobufCBuffer     *buffer);
Xchain__PingRequest *
       xchain__ping_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   xchain__ping_request__free_unpacked
                     (Xchain__PingRequest *message,
                      ProtobufCAllocator *allocator);
/* Xchain__PingResponse methods */
void   xchain__ping_response__init
                     (Xchain__PingResponse         *message);
size_t xchain__ping_response__get_packed_size
                     (const Xchain__PingResponse   *message);
size_t xchain__ping_response__pack
                     (const Xchain__PingResponse   *message,
                      uint8_t             *out);
size_t xchain__ping_response__pack_to_buffer
                     (const Xchain__PingResponse   *message,
                      ProtobufCBuffer     *buffer);
Xchain__PingResponse *
       xchain__ping_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   xchain__ping_response__free_unpacked
                     (Xchain__PingResponse *message,
                      ProtobufCAllocator *allocator);
/* Xchain__NativeCallRequest methods */
void   xchain__native_call_request__init
                     (Xchain__NativeCallRequest         *message);
size_t xchain__native_call_request__get_packed_size
                     (const Xchain__NativeCallRequest   *message);
size_t xchain__native_call_request__pack
                     (const Xchain__NativeCallRequest   *message,
                      uint8_t             *out);
size_t xchain__native_call_request__pack_to_buffer
                     (const Xchain__NativeCallRequest   *message,
                      ProtobufCBuffer     *buffer);
Xchain__NativeCallRequest *
       xchain__native_call_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   xchain__native_call_request__free_unpacked
                     (Xchain__NativeCallRequest *message,
                      ProtobufCAllocator *allocator);
/* Xchain__NativeCallResponse methods */
void   xchain__native_call_response__init
                     (Xchain__NativeCallResponse         *message);
size_t xchain__native_call_response__get_packed_size
                     (const Xchain__NativeCallResponse   *message);
size_t xchain__native_call_response__pack
                     (const Xchain__NativeCallResponse   *message,
                      uint8_t             *out);
size_t xchain__native_call_response__pack_to_buffer
                     (const Xchain__NativeCallResponse   *message,
                      ProtobufCBuffer     *buffer);
Xchain__NativeCallResponse *
       xchain__native_call_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   xchain__native_call_response__free_unpacked
                     (Xchain__NativeCallResponse *message,
                      ProtobufCAllocator *allocator);
/* Xchain__ArgPair methods */
void   xchain__arg_pair__init
                     (Xchain__ArgPair         *message);
size_t xchain__arg_pair__get_packed_size
                     (const Xchain__ArgPair   *message);
size_t xchain__arg_pair__pack
                     (const Xchain__ArgPair   *message,
                      uint8_t             *out);
size_t xchain__arg_pair__pack_to_buffer
                     (const Xchain__ArgPair   *message,
                      ProtobufCBuffer     *buffer);
Xchain__ArgPair *
       xchain__arg_pair__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   xchain__arg_pair__free_unpacked
                     (Xchain__ArgPair *message,
                      ProtobufCAllocator *allocator);
/* Xchain__CallArgs methods */
void   xchain__call_args__init
                     (Xchain__CallArgs         *message);
size_t xchain__call_args__get_packed_size
                     (const Xchain__CallArgs   *message);
size_t xchain__call_args__pack
                     (const Xchain__CallArgs   *message,
                      uint8_t             *out);
size_t xchain__call_args__pack_to_buffer
                     (const Xchain__CallArgs   *message,
                      ProtobufCBuffer     *buffer);
Xchain__CallArgs *
       xchain__call_args__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   xchain__call_args__free_unpacked
                     (Xchain__CallArgs *message,
                      ProtobufCAllocator *allocator);
/* Xchain__SyscallHeader methods */
void   xchain__syscall_header__init
                     (Xchain__SyscallHeader         *message);
size_t xchain__syscall_header__get_packed_size
                     (const Xchain__SyscallHeader   *message);
size_t xchain__syscall_header__pack
                     (const Xchain__SyscallHeader   *message,
                      uint8_t             *out);
size_t xchain__syscall_header__pack_to_buffer
                     (const Xchain__SyscallHeader   *message,
                      ProtobufCBuffer     *buffer);
Xchain__SyscallHeader *
       xchain__syscall_header__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   xchain__syscall_header__free_unpacked
                     (Xchain__SyscallHeader *message,
                      ProtobufCAllocator *allocator);
/* Xchain__PutRequest methods */
void   xchain__put_request__init
                     (Xchain__PutRequest         *message);
size_t xchain__put_request__get_packed_size
                     (const Xchain__PutRequest   *message);
size_t xchain__put_request__pack
                     (const Xchain__PutRequest   *message,
                      uint8_t             *out);
size_t xchain__put_request__pack_to_buffer
                     (const Xchain__PutRequest   *message,
                      ProtobufCBuffer     *buffer);
Xchain__PutRequest *
       xchain__put_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   xchain__put_request__free_unpacked
                     (Xchain__PutRequest *message,
                      ProtobufCAllocator *allocator);
/* Xchain__PutResponse methods */
void   xchain__put_response__init
                     (Xchain__PutResponse         *message);
size_t xchain__put_response__get_packed_size
                     (const Xchain__PutResponse   *message);
size_t xchain__put_response__pack
                     (const Xchain__PutResponse   *message,
                      uint8_t             *out);
size_t xchain__put_response__pack_to_buffer
                     (const Xchain__PutResponse   *message,
                      ProtobufCBuffer     *buffer);
Xchain__PutResponse *
       xchain__put_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   xchain__put_response__free_unpacked
                     (Xchain__PutResponse *message,
                      ProtobufCAllocator *allocator);
/* Xchain__GetRequest methods */
void   xchain__get_request__init
                     (Xchain__GetRequest         *message);
size_t xchain__get_request__get_packed_size
                     (const Xchain__GetRequest   *message);
size_t xchain__get_request__pack
                     (const Xchain__GetRequest   *message,
                      uint8_t             *out);
size_t xchain__get_request__pack_to_buffer
                     (const Xchain__GetRequest   *message,
                      ProtobufCBuffer     *buffer);
Xchain__GetRequest *
       xchain__get_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   xchain__get_request__free_unpacked
                     (Xchain__GetRequest *message,
                      ProtobufCAllocator *allocator);
/* Xchain__GetResponse methods */
void   xchain__get_response__init
                     (Xchain__GetResponse         *message);
size_t xchain__get_response__get_packed_size
                     (const Xchain__GetResponse   *message);
size_t xchain__get_response__pack
                     (const Xchain__GetResponse   *message,
                      uint8_t             *out);
size_t xchain__get_response__pack_to_buffer
                     (const Xchain__GetResponse   *message,
                      ProtobufCBuffer     *buffer);
Xchain__GetResponse *
       xchain__get_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   xchain__get_response__free_unpacked
                     (Xchain__GetResponse *message,
                      ProtobufCAllocator *allocator);
/* Xchain__DeleteRequest methods */
void   xchain__delete_request__init
                     (Xchain__DeleteRequest         *message);
size_t xchain__delete_request__get_packed_size
                     (const Xchain__DeleteRequest   *message);
size_t xchain__delete_request__pack
                     (const Xchain__DeleteRequest   *message,
                      uint8_t             *out);
size_t xchain__delete_request__pack_to_buffer
                     (const Xchain__DeleteRequest   *message,
                      ProtobufCBuffer     *buffer);
Xchain__DeleteRequest *
       xchain__delete_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   xchain__delete_request__free_unpacked
                     (Xchain__DeleteRequest *message,
                      ProtobufCAllocator *allocator);
/* Xchain__DeleteResponse methods */
void   xchain__delete_response__init
                     (Xchain__DeleteResponse         *message);
size_t xchain__delete_response__get_packed_size
                     (const Xchain__DeleteResponse   *message);
size_t xchain__delete_response__pack
                     (const Xchain__DeleteResponse   *message,
                      uint8_t             *out);
size_t xchain__delete_response__pack_to_buffer
                     (const Xchain__DeleteResponse   *message,
                      ProtobufCBuffer     *buffer);
Xchain__DeleteResponse *
       xchain__delete_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   xchain__delete_response__free_unpacked
                     (Xchain__DeleteResponse *message,
                      ProtobufCAllocator *allocator);
/* Xchain__IteratorRequest methods */
void   xchain__iterator_request__init
                     (Xchain__IteratorRequest         *message);
size_t xchain__iterator_request__get_packed_size
                     (const Xchain__IteratorRequest   *message);
size_t xchain__iterator_request__pack
                     (const Xchain__IteratorRequest   *message,
                      uint8_t             *out);
size_t xchain__iterator_request__pack_to_buffer
                     (const Xchain__IteratorRequest   *message,
                      ProtobufCBuffer     *buffer);
Xchain__IteratorRequest *
       xchain__iterator_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   xchain__iterator_request__free_unpacked
                     (Xchain__IteratorRequest *message,
                      ProtobufCAllocator *allocator);
/* Xchain__IteratorItem methods */
void   xchain__iterator_item__init
                     (Xchain__IteratorItem         *message);
size_t xchain__iterator_item__get_packed_size
                     (const Xchain__IteratorItem   *message);
size_t xchain__iterator_item__pack
                     (const Xchain__IteratorItem   *message,
                      uint8_t             *out);
size_t xchain__iterator_item__pack_to_buffer
                     (const Xchain__IteratorItem   *message,
                      ProtobufCBuffer     *buffer);
Xchain__IteratorItem *
       xchain__iterator_item__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   xchain__iterator_item__free_unpacked
                     (Xchain__IteratorItem *message,
                      ProtobufCAllocator *allocator);
/* Xchain__IteratorResponse methods */
void   xchain__iterator_response__init
                     (Xchain__IteratorResponse         *message);
size_t xchain__iterator_response__get_packed_size
                     (const Xchain__IteratorResponse   *message);
size_t xchain__iterator_response__pack
                     (const Xchain__IteratorResponse   *message,
                      uint8_t             *out);
size_t xchain__iterator_response__pack_to_buffer
                     (const Xchain__IteratorResponse   *message,
                      ProtobufCBuffer     *buffer);
Xchain__IteratorResponse *
       xchain__iterator_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   xchain__iterator_response__free_unpacked
                     (Xchain__IteratorResponse *message,
                      ProtobufCAllocator *allocator);
/* Xchain__QueryTxRequest methods */
void   xchain__query_tx_request__init
                     (Xchain__QueryTxRequest         *message);
size_t xchain__query_tx_request__get_packed_size
                     (const Xchain__QueryTxRequest   *message);
size_t xchain__query_tx_request__pack
                     (const Xchain__QueryTxRequest   *message,
                      uint8_t             *out);
size_t xchain__query_tx_request__pack_to_buffer
                     (const Xchain__QueryTxRequest   *message,
                      ProtobufCBuffer     *buffer);
Xchain__QueryTxRequest *
       xchain__query_tx_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   xchain__query_tx_request__free_unpacked
                     (Xchain__QueryTxRequest *message,
                      ProtobufCAllocator *allocator);
/* Xchain__QueryTxResponse methods */
void   xchain__query_tx_response__init
                     (Xchain__QueryTxResponse         *message);
size_t xchain__query_tx_response__get_packed_size
                     (const Xchain__QueryTxResponse   *message);
size_t xchain__query_tx_response__pack
                     (const Xchain__QueryTxResponse   *message,
                      uint8_t             *out);
size_t xchain__query_tx_response__pack_to_buffer
                     (const Xchain__QueryTxResponse   *message,
                      ProtobufCBuffer     *buffer);
Xchain__QueryTxResponse *
       xchain__query_tx_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   xchain__query_tx_response__free_unpacked
                     (Xchain__QueryTxResponse *message,
                      ProtobufCAllocator *allocator);
/* Xchain__QueryBlockRequest methods */
void   xchain__query_block_request__init
                     (Xchain__QueryBlockRequest         *message);
size_t xchain__query_block_request__get_packed_size
                     (const Xchain__QueryBlockRequest   *message);
size_t xchain__query_block_request__pack
                     (const Xchain__QueryBlockRequest   *message,
                      uint8_t             *out);
size_t xchain__query_block_request__pack_to_buffer
                     (const Xchain__QueryBlockRequest   *message,
                      ProtobufCBuffer     *buffer);
Xchain__QueryBlockRequest *
       xchain__query_block_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   xchain__query_block_request__free_unpacked
                     (Xchain__QueryBlockRequest *message,
                      ProtobufCAllocator *allocator);
/* Xchain__QueryBlockResponse methods */
void   xchain__query_block_response__init
                     (Xchain__QueryBlockResponse         *message);
size_t xchain__query_block_response__get_packed_size
                     (const Xchain__QueryBlockResponse   *message);
size_t xchain__query_block_response__pack
                     (const Xchain__QueryBlockResponse   *message,
                      uint8_t             *out);
size_t xchain__query_block_response__pack_to_buffer
                     (const Xchain__QueryBlockResponse   *message,
                      ProtobufCBuffer     *buffer);
Xchain__QueryBlockResponse *
       xchain__query_block_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   xchain__query_block_response__free_unpacked
                     (Xchain__QueryBlockResponse *message,
                      ProtobufCAllocator *allocator);
/* Xchain__TransferRequest methods */
void   xchain__transfer_request__init
                     (Xchain__TransferRequest         *message);
size_t xchain__transfer_request__get_packed_size
                     (const Xchain__TransferRequest   *message);
size_t xchain__transfer_request__pack
                     (const Xchain__TransferRequest   *message,
                      uint8_t             *out);
size_t xchain__transfer_request__pack_to_buffer
                     (const Xchain__TransferRequest   *message,
                      ProtobufCBuffer     *buffer);
Xchain__TransferRequest *
       xchain__transfer_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   xchain__transfer_request__free_unpacked
                     (Xchain__TransferRequest *message,
                      ProtobufCAllocator *allocator);
/* Xchain__TransferResponse methods */
void   xchain__transfer_response__init
                     (Xchain__TransferResponse         *message);
size_t xchain__transfer_response__get_packed_size
                     (const Xchain__TransferResponse   *message);
size_t xchain__transfer_response__pack
                     (const Xchain__TransferResponse   *message,
                      uint8_t             *out);
size_t xchain__transfer_response__pack_to_buffer
                     (const Xchain__TransferResponse   *message,
                      ProtobufCBuffer     *buffer);
Xchain__TransferResponse *
       xchain__transfer_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   xchain__transfer_response__free_unpacked
                     (Xchain__TransferResponse *message,
                      ProtobufCAllocator *allocator);
/* Xchain__ContractCallRequest methods */
void   xchain__contract_call_request__init
                     (Xchain__ContractCallRequest         *message);
size_t xchain__contract_call_request__get_packed_size
                     (const Xchain__ContractCallRequest   *message);
size_t xchain__contract_call_request__pack
                     (const Xchain__ContractCallRequest   *message,
                      uint8_t             *out);
size_t xchain__contract_call_request__pack_to_buffer
                     (const Xchain__ContractCallRequest   *message,
                      ProtobufCBuffer     *buffer);
Xchain__ContractCallRequest *
       xchain__contract_call_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   xchain__contract_call_request__free_unpacked
                     (Xchain__ContractCallRequest *message,
                      ProtobufCAllocator *allocator);
/* Xchain__ContractCallResponse methods */
void   xchain__contract_call_response__init
                     (Xchain__ContractCallResponse         *message);
size_t xchain__contract_call_response__get_packed_size
                     (const Xchain__ContractCallResponse   *message);
size_t xchain__contract_call_response__pack
                     (const Xchain__ContractCallResponse   *message,
                      uint8_t             *out);
size_t xchain__contract_call_response__pack_to_buffer
                     (const Xchain__ContractCallResponse   *message,
                      ProtobufCBuffer     *buffer);
Xchain__ContractCallResponse *
       xchain__contract_call_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   xchain__contract_call_response__free_unpacked
                     (Xchain__ContractCallResponse *message,
                      ProtobufCAllocator *allocator);
/* Xchain__CrossContractQueryRequest methods */
void   xchain__cross_contract_query_request__init
                     (Xchain__CrossContractQueryRequest         *message);
size_t xchain__cross_contract_query_request__get_packed_size
                     (const Xchain__CrossContractQueryRequest   *message);
size_t xchain__cross_contract_query_request__pack
                     (const Xchain__CrossContractQueryRequest   *message,
                      uint8_t             *out);
size_t xchain__cross_contract_query_request__pack_to_buffer
                     (const Xchain__CrossContractQueryRequest   *message,
                      ProtobufCBuffer     *buffer);
Xchain__CrossContractQueryRequest *
       xchain__cross_contract_query_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   xchain__cross_contract_query_request__free_unpacked
                     (Xchain__CrossContractQueryRequest *message,
                      ProtobufCAllocator *allocator);
/* Xchain__CrossContractQueryResponse methods */
void   xchain__cross_contract_query_response__init
                     (Xchain__CrossContractQueryResponse         *message);
size_t xchain__cross_contract_query_response__get_packed_size
                     (const Xchain__CrossContractQueryResponse   *message);
size_t xchain__cross_contract_query_response__pack
                     (const Xchain__CrossContractQueryResponse   *message,
                      uint8_t             *out);
size_t xchain__cross_contract_query_response__pack_to_buffer
                     (const Xchain__CrossContractQueryResponse   *message,
                      ProtobufCBuffer     *buffer);
Xchain__CrossContractQueryResponse *
       xchain__cross_contract_query_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   xchain__cross_contract_query_response__free_unpacked
                     (Xchain__CrossContractQueryResponse *message,
                      ProtobufCAllocator *allocator);
/* Xchain__Response methods */
void   xchain__response__init
                     (Xchain__Response         *message);
size_t xchain__response__get_packed_size
                     (const Xchain__Response   *message);
size_t xchain__response__pack
                     (const Xchain__Response   *message,
                      uint8_t             *out);
size_t xchain__response__pack_to_buffer
                     (const Xchain__Response   *message,
                      ProtobufCBuffer     *buffer);
Xchain__Response *
       xchain__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   xchain__response__free_unpacked
                     (Xchain__Response *message,
                      ProtobufCAllocator *allocator);
/* Xchain__SetOutputRequest methods */
void   xchain__set_output_request__init
                     (Xchain__SetOutputRequest         *message);
size_t xchain__set_output_request__get_packed_size
                     (const Xchain__SetOutputRequest   *message);
size_t xchain__set_output_request__pack
                     (const Xchain__SetOutputRequest   *message,
                      uint8_t             *out);
size_t xchain__set_output_request__pack_to_buffer
                     (const Xchain__SetOutputRequest   *message,
                      ProtobufCBuffer     *buffer);
Xchain__SetOutputRequest *
       xchain__set_output_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   xchain__set_output_request__free_unpacked
                     (Xchain__SetOutputRequest *message,
                      ProtobufCAllocator *allocator);
/* Xchain__SetOutputResponse methods */
void   xchain__set_output_response__init
                     (Xchain__SetOutputResponse         *message);
size_t xchain__set_output_response__get_packed_size
                     (const Xchain__SetOutputResponse   *message);
size_t xchain__set_output_response__pack
                     (const Xchain__SetOutputResponse   *message,
                      uint8_t             *out);
size_t xchain__set_output_response__pack_to_buffer
                     (const Xchain__SetOutputResponse   *message,
                      ProtobufCBuffer     *buffer);
Xchain__SetOutputResponse *
       xchain__set_output_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   xchain__set_output_response__free_unpacked
                     (Xchain__SetOutputResponse *message,
                      ProtobufCAllocator *allocator);
/* Xchain__GetCallArgsRequest methods */
void   xchain__get_call_args_request__init
                     (Xchain__GetCallArgsRequest         *message);
size_t xchain__get_call_args_request__get_packed_size
                     (const Xchain__GetCallArgsRequest   *message);
size_t xchain__get_call_args_request__pack
                     (const Xchain__GetCallArgsRequest   *message,
                      uint8_t             *out);
size_t xchain__get_call_args_request__pack_to_buffer
                     (const Xchain__GetCallArgsRequest   *message,
                      ProtobufCBuffer     *buffer);
Xchain__GetCallArgsRequest *
       xchain__get_call_args_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   xchain__get_call_args_request__free_unpacked
                     (Xchain__GetCallArgsRequest *message,
                      ProtobufCAllocator *allocator);
/* Xchain__TxInput methods */
void   xchain__tx_input__init
                     (Xchain__TxInput         *message);
size_t xchain__tx_input__get_packed_size
                     (const Xchain__TxInput   *message);
size_t xchain__tx_input__pack
                     (const Xchain__TxInput   *message,
                      uint8_t             *out);
size_t xchain__tx_input__pack_to_buffer
                     (const Xchain__TxInput   *message,
                      ProtobufCBuffer     *buffer);
Xchain__TxInput *
       xchain__tx_input__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   xchain__tx_input__free_unpacked
                     (Xchain__TxInput *message,
                      ProtobufCAllocator *allocator);
/* Xchain__TxOutput methods */
void   xchain__tx_output__init
                     (Xchain__TxOutput         *message);
size_t xchain__tx_output__get_packed_size
                     (const Xchain__TxOutput   *message);
size_t xchain__tx_output__pack
                     (const Xchain__TxOutput   *message,
                      uint8_t             *out);
size_t xchain__tx_output__pack_to_buffer
                     (const Xchain__TxOutput   *message,
                      ProtobufCBuffer     *buffer);
Xchain__TxOutput *
       xchain__tx_output__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   xchain__tx_output__free_unpacked
                     (Xchain__TxOutput *message,
                      ProtobufCAllocator *allocator);
/* Xchain__Transaction methods */
void   xchain__transaction__init
                     (Xchain__Transaction         *message);
size_t xchain__transaction__get_packed_size
                     (const Xchain__Transaction   *message);
size_t xchain__transaction__pack
                     (const Xchain__Transaction   *message,
                      uint8_t             *out);
size_t xchain__transaction__pack_to_buffer
                     (const Xchain__Transaction   *message,
                      ProtobufCBuffer     *buffer);
Xchain__Transaction *
       xchain__transaction__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   xchain__transaction__free_unpacked
                     (Xchain__Transaction *message,
                      ProtobufCAllocator *allocator);
/* Xchain__Block methods */
void   xchain__block__init
                     (Xchain__Block         *message);
size_t xchain__block__get_packed_size
                     (const Xchain__Block   *message);
size_t xchain__block__pack
                     (const Xchain__Block   *message,
                      uint8_t             *out);
size_t xchain__block__pack_to_buffer
                     (const Xchain__Block   *message,
                      ProtobufCBuffer     *buffer);
Xchain__Block *
       xchain__block__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   xchain__block__free_unpacked
                     (Xchain__Block *message,
                      ProtobufCAllocator *allocator);
/* Xchain__GetAccountAddressesRequest methods */
void   xchain__get_account_addresses_request__init
                     (Xchain__GetAccountAddressesRequest         *message);
size_t xchain__get_account_addresses_request__get_packed_size
                     (const Xchain__GetAccountAddressesRequest   *message);
size_t xchain__get_account_addresses_request__pack
                     (const Xchain__GetAccountAddressesRequest   *message,
                      uint8_t             *out);
size_t xchain__get_account_addresses_request__pack_to_buffer
                     (const Xchain__GetAccountAddressesRequest   *message,
                      ProtobufCBuffer     *buffer);
Xchain__GetAccountAddressesRequest *
       xchain__get_account_addresses_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   xchain__get_account_addresses_request__free_unpacked
                     (Xchain__GetAccountAddressesRequest *message,
                      ProtobufCAllocator *allocator);
/* Xchain__GetAccountAddressesResponse methods */
void   xchain__get_account_addresses_response__init
                     (Xchain__GetAccountAddressesResponse         *message);
size_t xchain__get_account_addresses_response__get_packed_size
                     (const Xchain__GetAccountAddressesResponse   *message);
size_t xchain__get_account_addresses_response__pack
                     (const Xchain__GetAccountAddressesResponse   *message,
                      uint8_t             *out);
size_t xchain__get_account_addresses_response__pack_to_buffer
                     (const Xchain__GetAccountAddressesResponse   *message,
                      ProtobufCBuffer     *buffer);
Xchain__GetAccountAddressesResponse *
       xchain__get_account_addresses_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   xchain__get_account_addresses_response__free_unpacked
                     (Xchain__GetAccountAddressesResponse *message,
                      ProtobufCAllocator *allocator);
/* Xchain__PostLogRequest methods */
void   xchain__post_log_request__init
                     (Xchain__PostLogRequest         *message);
size_t xchain__post_log_request__get_packed_size
                     (const Xchain__PostLogRequest   *message);
size_t xchain__post_log_request__pack
                     (const Xchain__PostLogRequest   *message,
                      uint8_t             *out);
size_t xchain__post_log_request__pack_to_buffer
                     (const Xchain__PostLogRequest   *message,
                      ProtobufCBuffer     *buffer);
Xchain__PostLogRequest *
       xchain__post_log_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   xchain__post_log_request__free_unpacked
                     (Xchain__PostLogRequest *message,
                      ProtobufCAllocator *allocator);
/* Xchain__PostLogResponse methods */
void   xchain__post_log_response__init
                     (Xchain__PostLogResponse         *message);
size_t xchain__post_log_response__get_packed_size
                     (const Xchain__PostLogResponse   *message);
size_t xchain__post_log_response__pack
                     (const Xchain__PostLogResponse   *message,
                      uint8_t             *out);
size_t xchain__post_log_response__pack_to_buffer
                     (const Xchain__PostLogResponse   *message,
                      ProtobufCBuffer     *buffer);
Xchain__PostLogResponse *
       xchain__post_log_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   xchain__post_log_response__free_unpacked
                     (Xchain__PostLogResponse *message,
                      ProtobufCAllocator *allocator);
/* Xchain__EmitEventRequest methods */
void   xchain__emit_event_request__init
                     (Xchain__EmitEventRequest         *message);
size_t xchain__emit_event_request__get_packed_size
                     (const Xchain__EmitEventRequest   *message);
size_t xchain__emit_event_request__pack
                     (const Xchain__EmitEventRequest   *message,
                      uint8_t             *out);
size_t xchain__emit_event_request__pack_to_buffer
                     (const Xchain__EmitEventRequest   *message,
                      ProtobufCBuffer     *buffer);
Xchain__EmitEventRequest *
       xchain__emit_event_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   xchain__emit_event_request__free_unpacked
                     (Xchain__EmitEventRequest *message,
                      ProtobufCAllocator *allocator);
/* Xchain__EmitEventResponse methods */
void   xchain__emit_event_response__init
                     (Xchain__EmitEventResponse         *message);
size_t xchain__emit_event_response__get_packed_size
                     (const Xchain__EmitEventResponse   *message);
size_t xchain__emit_event_response__pack
                     (const Xchain__EmitEventResponse   *message,
                      uint8_t             *out);
size_t xchain__emit_event_response__pack_to_buffer
                     (const Xchain__EmitEventResponse   *message,
                      ProtobufCBuffer     *buffer);
Xchain__EmitEventResponse *
       xchain__emit_event_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   xchain__emit_event_response__free_unpacked
                     (Xchain__EmitEventResponse *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Xchain__PingRequest_Closure)
                 (const Xchain__PingRequest *message,
                  void *closure_data);
typedef void (*Xchain__PingResponse_Closure)
                 (const Xchain__PingResponse *message,
                  void *closure_data);
typedef void (*Xchain__NativeCallRequest_Closure)
                 (const Xchain__NativeCallRequest *message,
                  void *closure_data);
typedef void (*Xchain__NativeCallResponse_Closure)
                 (const Xchain__NativeCallResponse *message,
                  void *closure_data);
typedef void (*Xchain__ArgPair_Closure)
                 (const Xchain__ArgPair *message,
                  void *closure_data);
typedef void (*Xchain__CallArgs_Closure)
                 (const Xchain__CallArgs *message,
                  void *closure_data);
typedef void (*Xchain__SyscallHeader_Closure)
                 (const Xchain__SyscallHeader *message,
                  void *closure_data);
typedef void (*Xchain__PutRequest_Closure)
                 (const Xchain__PutRequest *message,
                  void *closure_data);
typedef void (*Xchain__PutResponse_Closure)
                 (const Xchain__PutResponse *message,
                  void *closure_data);
typedef void (*Xchain__GetRequest_Closure)
                 (const Xchain__GetRequest *message,
                  void *closure_data);
typedef void (*Xchain__GetResponse_Closure)
                 (const Xchain__GetResponse *message,
                  void *closure_data);
typedef void (*Xchain__DeleteRequest_Closure)
                 (const Xchain__DeleteRequest *message,
                  void *closure_data);
typedef void (*Xchain__DeleteResponse_Closure)
                 (const Xchain__DeleteResponse *message,
                  void *closure_data);
typedef void (*Xchain__IteratorRequest_Closure)
                 (const Xchain__IteratorRequest *message,
                  void *closure_data);
typedef void (*Xchain__IteratorItem_Closure)
                 (const Xchain__IteratorItem *message,
                  void *closure_data);
typedef void (*Xchain__IteratorResponse_Closure)
                 (const Xchain__IteratorResponse *message,
                  void *closure_data);
typedef void (*Xchain__QueryTxRequest_Closure)
                 (const Xchain__QueryTxRequest *message,
                  void *closure_data);
typedef void (*Xchain__QueryTxResponse_Closure)
                 (const Xchain__QueryTxResponse *message,
                  void *closure_data);
typedef void (*Xchain__QueryBlockRequest_Closure)
                 (const Xchain__QueryBlockRequest *message,
                  void *closure_data);
typedef void (*Xchain__QueryBlockResponse_Closure)
                 (const Xchain__QueryBlockResponse *message,
                  void *closure_data);
typedef void (*Xchain__TransferRequest_Closure)
                 (const Xchain__TransferRequest *message,
                  void *closure_data);
typedef void (*Xchain__TransferResponse_Closure)
                 (const Xchain__TransferResponse *message,
                  void *closure_data);
typedef void (*Xchain__ContractCallRequest_Closure)
                 (const Xchain__ContractCallRequest *message,
                  void *closure_data);
typedef void (*Xchain__ContractCallResponse_Closure)
                 (const Xchain__ContractCallResponse *message,
                  void *closure_data);
typedef void (*Xchain__CrossContractQueryRequest_Closure)
                 (const Xchain__CrossContractQueryRequest *message,
                  void *closure_data);
typedef void (*Xchain__CrossContractQueryResponse_Closure)
                 (const Xchain__CrossContractQueryResponse *message,
                  void *closure_data);
typedef void (*Xchain__Response_Closure)
                 (const Xchain__Response *message,
                  void *closure_data);
typedef void (*Xchain__SetOutputRequest_Closure)
                 (const Xchain__SetOutputRequest *message,
                  void *closure_data);
typedef void (*Xchain__SetOutputResponse_Closure)
                 (const Xchain__SetOutputResponse *message,
                  void *closure_data);
typedef void (*Xchain__GetCallArgsRequest_Closure)
                 (const Xchain__GetCallArgsRequest *message,
                  void *closure_data);
typedef void (*Xchain__TxInput_Closure)
                 (const Xchain__TxInput *message,
                  void *closure_data);
typedef void (*Xchain__TxOutput_Closure)
                 (const Xchain__TxOutput *message,
                  void *closure_data);
typedef void (*Xchain__Transaction_Closure)
                 (const Xchain__Transaction *message,
                  void *closure_data);
typedef void (*Xchain__Block_Closure)
                 (const Xchain__Block *message,
                  void *closure_data);
typedef void (*Xchain__GetAccountAddressesRequest_Closure)
                 (const Xchain__GetAccountAddressesRequest *message,
                  void *closure_data);
typedef void (*Xchain__GetAccountAddressesResponse_Closure)
                 (const Xchain__GetAccountAddressesResponse *message,
                  void *closure_data);
typedef void (*Xchain__PostLogRequest_Closure)
                 (const Xchain__PostLogRequest *message,
                  void *closure_data);
typedef void (*Xchain__PostLogResponse_Closure)
                 (const Xchain__PostLogResponse *message,
                  void *closure_data);
typedef void (*Xchain__EmitEventRequest_Closure)
                 (const Xchain__EmitEventRequest *message,
                  void *closure_data);
typedef void (*Xchain__EmitEventResponse_Closure)
                 (const Xchain__EmitEventResponse *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor xchain__ping_request__descriptor;
extern const ProtobufCMessageDescriptor xchain__ping_response__descriptor;
extern const ProtobufCMessageDescriptor xchain__native_call_request__descriptor;
extern const ProtobufCMessageDescriptor xchain__native_call_response__descriptor;
extern const ProtobufCMessageDescriptor xchain__arg_pair__descriptor;
extern const ProtobufCMessageDescriptor xchain__call_args__descriptor;
extern const ProtobufCMessageDescriptor xchain__syscall_header__descriptor;
extern const ProtobufCMessageDescriptor xchain__put_request__descriptor;
extern const ProtobufCMessageDescriptor xchain__put_response__descriptor;
extern const ProtobufCMessageDescriptor xchain__get_request__descriptor;
extern const ProtobufCMessageDescriptor xchain__get_response__descriptor;
extern const ProtobufCMessageDescriptor xchain__delete_request__descriptor;
extern const ProtobufCMessageDescriptor xchain__delete_response__descriptor;
extern const ProtobufCMessageDescriptor xchain__iterator_request__descriptor;
extern const ProtobufCMessageDescriptor xchain__iterator_item__descriptor;
extern const ProtobufCMessageDescriptor xchain__iterator_response__descriptor;
extern const ProtobufCMessageDescriptor xchain__query_tx_request__descriptor;
extern const ProtobufCMessageDescriptor xchain__query_tx_response__descriptor;
extern const ProtobufCMessageDescriptor xchain__query_block_request__descriptor;
extern const ProtobufCMessageDescriptor xchain__query_block_response__descriptor;
extern const ProtobufCMessageDescriptor xchain__transfer_request__descriptor;
extern const ProtobufCMessageDescriptor xchain__transfer_response__descriptor;
extern const ProtobufCMessageDescriptor xchain__contract_call_request__descriptor;
extern const ProtobufCMessageDescriptor xchain__contract_call_response__descriptor;
extern const ProtobufCMessageDescriptor xchain__cross_contract_query_request__descriptor;
extern const ProtobufCMessageDescriptor xchain__cross_contract_query_response__descriptor;
extern const ProtobufCMessageDescriptor xchain__response__descriptor;
extern const ProtobufCMessageDescriptor xchain__set_output_request__descriptor;
extern const ProtobufCMessageDescriptor xchain__set_output_response__descriptor;
extern const ProtobufCMessageDescriptor xchain__get_call_args_request__descriptor;
extern const ProtobufCMessageDescriptor xchain__tx_input__descriptor;
extern const ProtobufCMessageDescriptor xchain__tx_output__descriptor;
extern const ProtobufCMessageDescriptor xchain__transaction__descriptor;
extern const ProtobufCMessageDescriptor xchain__block__descriptor;
extern const ProtobufCMessageDescriptor xchain__get_account_addresses_request__descriptor;
extern const ProtobufCMessageDescriptor xchain__get_account_addresses_response__descriptor;
extern const ProtobufCMessageDescriptor xchain__post_log_request__descriptor;
extern const ProtobufCMessageDescriptor xchain__post_log_response__descriptor;
extern const ProtobufCMessageDescriptor xchain__emit_event_request__descriptor;
extern const ProtobufCMessageDescriptor xchain__emit_event_response__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_contract_2eproto__INCLUDED */
